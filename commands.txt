k auth can-i create deployments --namespace default
# CERT generation
openssl genrsa -out dev-adwiz.key 2048
openssl req -new -key dev-adwiz.key -subj "/CN=Adwiz" -out dev-adwiz.csr

# create file dev-adwiz-csr.yaml

apiVersion: certificates.k8s.io/v1
kind: CertificateSigningRequest
metadata:
  name: dev-adwiz
spec:
  request: rfgdfgdfgdf
  signerName: kubernetes.io/kube-apiserver-client
  expirationSeconds: 86400  # one day
  usages:
  - client auth

cat dev-adwiz.csr | base64 | tr -d "\n" put int into a ile dev-adwiz-csr.yaml to "request:" field
k apply -f dev-adwiz-csr.yaml 
k get csr
cat .kube/config | grep kubernetes-admin -A2
k certificates --help
k certificate approve dev-adwiz
k get csr dev-adwiz -o yaml
echo 'cert' | base64 --decode
 k --server https://172.31.7.2:6443 \
 --certificate-authority /etc/kubernetes/pki/ca.crt \
 --client-certificate dev-adwiz.crt \
 --client-key dev-adwiz.key \
get po
base64 dev-adwiz.crt | tf -d "\n"
base64 dev-adwiz.key | tf -d "\n"
k --kubeconfig dev-adwiz.conf get po
k --kubeconfig config apply -f dev-cr.yaml 
k --kubeconfig config get clusterrole
k --kubeconfig config describe clusterrole dev-cr
k create clusterrolebinding
k --kubeconfig config describe clusterrolebinding dev-crb
k --kubeconfig config delete clusterrolebinding dev-crb
k auth --kubeconfig config can-i create pod --as Adwiz
k auth --kubeconfig config can-i get node --as Adwiz
k auth --kubeconfig config can-i delete deployment --as Adwiz
k create serviceaccount jenkins --dry-run=client -o yaml > jenkins-sa.yaml
k describe serviceaccount jenkins
k get secret jenkins-token-v6246
k get secret jenkins-token-v6246 -o yaml
k get cm -o yaml -n kube-system kubeadm-config
k cluster-info
k --server=https://172.31.7.2:6443 --certificate-authority /etc/kubernetes/pki/ca.crt --token $token get po
k create role cicd-role --verb=create,update,list --resource=deployments,services --dry-run=client -o yaml > cicd-role.yaml
k apply -f cicd-role.yaml
k describe role cicd-role
k create rolebinding cicd-binding --role=cicd-role --serviceaccount=default:jenkins --dry-run=client -o yaml > cicd-binding.yaml
k apply -f cicd-binding.yaml
k describe rolebinding cicd-binding
k auth can-i create service --as system:serviceaccount:default:jenkins -n default
# Trouble shooting
k run debug-pod --image=busybox -it
k attach debug-pod -c debug-pod -it
k exec -it busybox-pod -- sh -c "printenv"
k exec -it busybox-pod -- sh -c "netstat -lntp"
k get po -o jsonpath='{.items[0]}'
k get po -o jsonpath='{.items[0].metadata}' # show only metadata attribute
k get po -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}'
k get po -o jsonpath='{range .items[*]}{.metadata.name}{"\t"}{.status.podIP}{"\n"}{end}'
k get po -o jsonpath='{range .items[*]}{.metadata.name}{"\t"}{.status.podIP}{"\t"}{.status.startTime}{"\n"}{end}'
k get po -o custom-columns=POD_NAME:.metadata.name,POD_IP:.status.podIP,CREATED_AT:.status.startTime
# ts kubelet on worker node
service kubelet status
journalctl -u kubelet
k config view
k logs nginx-deployment-677d8ffdfd-6w2zq -c log-sidecar
k create svc clusterip mydb-service --tcp=80:80
k get pv
echo -n "myuser" | base64
k apply -f .
k rollout restart deployment/my-db
k rollout status deployment/my-db
k get po -o jsonpath='{range .items[*]}{.metadata.name}{.spec.containers[*].resources}{"\n"}'
k get node --show-labels
k label node worker2 type=cpu
# Taints and tolerations
k describe node | grep Taint
k get po -n kube-system -o custom-columns=POD_NAME:.metadata.name,TOLERATIONS:.spec.tolerations
k rollout history deployment nginx-deployment
k get rs
k rollout history deployment nginx-deployment
k rollout status deployment nginx-deployment
sudo cat /etc/kubernetes/manifests/kube-apiserver.yaml | grep /etc/kubernetes/pki
# etcd backup
sudo ETCDCTL_API=3 etcdctl snapshot save /tmp/etcd-backup.db --cacert=/etc/kubernetes/pki/etcd/ca.crt --cacert /etc/kubernetes/pki/etcd/ca.crt --cert /etc/kubernetes/pki/etcd/server.crt --key /etc/kubernetes/pki/etcd/server.key
sudo ETCDCTL_API=3 etcdctl snapshot status /tmp/etcd-backup.db --write-out=table
k get all
sudo ETCDCTL_API=3 etcdctl snapshot restore /tmp/etcd-backup.db --data-dir /var/lib/etcd-backup
vim /etc/kubernetes/manifests/etcd.yaml
curl http://localhost:8080/api
curl http://localhost:8080/api/v1
curl http://localhost:8080/api/v1/namespaces
k create rolebinding script-role-binding --role=script-role --serviceaccount=default:myscript
k get secret myscript-token-mfvfk -o yaml
echo token | base64 --decode | tr -d "\n"
TOKEN=$(echo token | base64 --decode | tr -d "\n")
k congig view
curl -X GET $SERVER/api --header "Authorization: Bearer $TOKEN" --cacert /etc/kubernetes/pki/ca.crt 
curl -X GET $SERVER/api/v1/namespaces/default/services --header "Authorization: Bearer $TOKEN" --cacert /etc/kubernetes/pki/ca.crt
curl -X GET $SERVER/apis/apps/v1/namespaces/default/deployments --header "Authorization: Bearer $TOKEN" --insecure
curl -X GET $SERVER/apis/apps/v1/namespaces/default/deployments/nginx-deployment --header "Authorization: Bearer $TOKEN" --insecure
# Upgrade k8s cluster
kubeadm upgrade apply 1.21.0
kubectl drain master
kubectl uncordon master
#upgrade procedure
apt-get install -y --allow-change-held-packages kubeadm=1.22.0-00
kubeadm version
kubeadm upgrade plan
kubeadm upgrade apply v1.22.0
kubectl config use-contex <CONTEXT-NAME>
k config get-contexts
k config current-contex
k config set-contex --current --namespace=kube-system
# How to check certificate expirations
ls /etc/kubernetes/pki
kubeadm certs --help
sudo kubeadm certs check-expiration
sudo openssl x509 -in /etc/kubernetes/pki/ca.crt -text -noout
sudo openssl x509 -in /etc/kubernetes/pki/ca.crt -text -noout | grep Validity -A2
kubeadm certs renew --help









